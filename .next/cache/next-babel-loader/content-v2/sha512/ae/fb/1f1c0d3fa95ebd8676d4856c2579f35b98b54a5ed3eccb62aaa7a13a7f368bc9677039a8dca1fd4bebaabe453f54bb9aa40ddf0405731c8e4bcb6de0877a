{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\";\nimport Image from 'next/image';\nimport Head from 'next/head';\nexport var __N_SSG = true;\nexport default function MyPage(data) {\n  var pdata = data.page;\n  console.log(\"page\", pdata);\n  /*if(pdata){\n  var contnt = pdata.content.rendered;\n  }else{\n   var contnt = \"No Data\";\n  } */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"*\", /*#__PURE__*/_jsxDEV(\"title\", {\n        children: pdata ? pdata.title : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = MyPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPage\");","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Image","Head","MyPage","data","pdata","page","console","log","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,eAAe,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AAEnC,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBH,KAAnB;AACA;AACH;AACA;AACA;AACA;;AAEI,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAKI;AAAA,mCAAK;AAAA,kBAAQA,KAAK,GAAGA,KAAK,CAACI,KAAT,gBAAiB;AAA9B;AAAA;AAAA;AAAA;AAAA,cAAL;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;KArBuBN,M","sourcesContent":["import Image from 'next/image'\nimport Head from 'next/head'\nexport default function MyPage( data ){\n\n   const pdata = data.page;\n   console.log(\"page\",pdata) \n   /*if(pdata){\nvar contnt = pdata.content.rendered;\n   }else{\n    var contnt = \"No Data\";\n   } */\n\n    return (\n        <div>\n        <Head>\n            {/*<title>{pdata ? pdata.title.rendered : <></> }</title>*/}\n        </Head>\n        \n            <h1>*<title>{pdata ? pdata.title : <></> }</title></h1>\n            {/*<article dangerouslySetInnerHTML={{__html: contnt}}></article>*/}\n        </div>\n    )\n\n}\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  console.log(\"path\",paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: true }\n\n}\n\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    const id = params.page;\n    console.log(\"paramw\",id)\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/?slug=${id}`)\n    const page = await res.json()\n    //console.log(\"pid\",page)\n    // Pass post data to the page via props\n    return { props: { page } }\n  }"]},"metadata":{},"sourceType":"module"}
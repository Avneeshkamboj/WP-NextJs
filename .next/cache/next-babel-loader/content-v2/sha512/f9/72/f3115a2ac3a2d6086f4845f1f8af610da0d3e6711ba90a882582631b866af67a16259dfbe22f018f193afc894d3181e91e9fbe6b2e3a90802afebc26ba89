{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n//import Image from 'next/image'\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\n\nvar Page = function Page() {\n  _s();\n\n  var router = useRouter();\n  var page = router.query.page;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Page: \", page]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Page, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Page;\nexport var __N_SSG = true;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Head","useRouter","Page","router","page","query"],"mappings":";;;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAKA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,MAAM,GAAGF,SAAS,EAAxB;AADiB,MAETG,IAFS,GAEAD,MAAM,CAACE,KAFP,CAETD,IAFS;AAIjB,sBAAQ;AAAA,4BACR,QAAC,IAAD;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,aADQ,eAER;AAAA,2BAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,aAFQ;AAAA,kBAAR;AAKD,CATD;;GAAMF,I;UACWD,S;;;KADXC,I;;AAWN,eAAeA,IAAf","sourcesContent":["//import Image from 'next/image'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\n\n\n\n\nconst Page = () => {\n  const router = useRouter()\n  const { page } = router.query;\n\n  return (<>\n  <Head>{page}</Head>\n  <p>Page: {page}</p>\n  </>\n  )\n}\n\nexport default Page\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  console.log(paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n\n}\n"]},"metadata":{},"sourceType":"module"}
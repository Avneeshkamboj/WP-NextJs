{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/test/[pid].js\";\nimport Head from 'next/head';\nexport default function Test(data) {\n  //console.log(\"res\",post.featuredImage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\nexport async function getStaticProps(context) {\n  const res = await fetch('http://wp.local/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `\n                query getPage {\n                    page(id: $id, idType: $idType ) {\n                      id\n                      databaseId\n                      title\n                      content\n                      slug\n                    }\n                }\n            `,\n      variables: {\n        id: context.params.slug,\n        idType: 'SLUG'\n      }\n    })\n  });\n  const json = await res.json();\n  console.warn(json.data.id);\n  return {\n    props: {\n      page: json\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const res = await fetch('http://wp.local/graphql', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: `query GetPagesEdges {\n                pages {\n                    nodes {\n                      id\n                      title\n                      date\n                      content\n                      slug\n                    }\n                }\n            }\n        `\n    })\n  });\n  const json = await res.json();\n  const pages = json.data.pages.nodes;\n  const paths = pages.map(page => ({\n    params: {\n      pid: page.slug\n    }\n  })); //console.log(paths);\n\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/test/[pid].js"],"names":["Head","Test","data","getStaticProps","context","res","fetch","method","headers","body","JSON","stringify","query","variables","id","params","slug","idType","json","console","warn","props","page","getStaticPaths","pages","nodes","paths","map","pid","fallback"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,IAAT,CAAeC,IAAf,EAAqB;AAGhC;AAGA,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAE1C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,yBAAD,EAA4B;AAC/CC,IAAAA,MAAM,EAAE,MADuC;AAE/CC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFsC;AAG/CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAX6B;AAYjBC,MAAAA,SAAS,EAAE;AACPC,QAAAA,EAAE,EAAEV,OAAO,CAACW,MAAR,CAAeC,IADZ;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAZM,KAAf;AAHyC,GAA5B,CAAvB;AAsBA,QAAMC,IAAI,GAAG,MAAMb,GAAG,CAACa,IAAJ,EAAnB;AACJC,EAAAA,OAAO,CAACC,IAAR,CAAaF,IAAI,CAAChB,IAAL,CAAUY,EAAvB;AACI,SAAO;AACHO,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAEJ;AADH;AADJ,GAAP;AAMH;AAED,OAAO,eAAeK,cAAf,GAAgC;AAEnC,QAAMlB,GAAG,GAAG,MAAMC,KAAK,CAAC,yBAAD,EAA4B;AAC/CC,IAAAA,MAAM,EAAE,MADuC;AAE/CC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFsC;AAG/CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZ6B,KAAf;AAHyC,GAA5B,CAAvB;AAkBA,QAAMM,IAAI,GAAG,MAAMb,GAAG,CAACa,IAAJ,EAAnB;AAEA,QAAMM,KAAK,GAAGN,IAAI,CAAChB,IAAL,CAAUsB,KAAV,CAAgBC,KAA9B;AAEA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWL,IAAD,KAAW;AAC/BP,IAAAA,MAAM,EAAE;AAAEa,MAAAA,GAAG,EAAEN,IAAI,CAACN;AAAZ;AADuB,GAAX,CAAV,CAAd,CAxBmC,CA2BnC;;AACA,SAAO;AAAEU,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAEH","sourcesContent":["import Head from 'next/head'\nexport default function Test( data ){\n\n    \n    //console.log(\"res\",post.featuredImage);\n    \n   \n    return (\n        <div>\n        <Head>\n            <title>test</title>\n        </Head>\n        \n            <h1>test</h1>\n            \n            \n        </div>\n    )\n\n}\n\nexport async function getStaticProps(context) {\n\n    const res = await fetch('http://wp.local/graphql', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            query: `\n                query getPage {\n                    page(id: $id, idType: $idType ) {\n                      id\n                      databaseId\n                      title\n                      content\n                      slug\n                    }\n                }\n            `,\n            variables: {\n                id: context.params.slug,\n                idType: 'SLUG'\n            }\n        })\n    })\n\n    const json = await res.json()\nconsole.warn(json.data.id);\n    return {\n        props: {\n            page: json,\n        },\n    }\n\n}\n\nexport async function getStaticPaths() {\n\n    const res = await fetch('http://wp.local/graphql', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n            query: `query GetPagesEdges {\n                pages {\n                    nodes {\n                      id\n                      title\n                      date\n                      content\n                      slug\n                    }\n                }\n            }\n        `})\n    })\n    \n    const json = await res.json()\n   \n    const pages = json.data.pages.nodes;\n\n    const paths = pages.map((page) => ({\n        params: { pid: page.slug },\n    }))\n    //console.log(paths);\n    return { paths, fallback: false }\n\n}\n"]},"metadata":{},"sourceType":"module"}
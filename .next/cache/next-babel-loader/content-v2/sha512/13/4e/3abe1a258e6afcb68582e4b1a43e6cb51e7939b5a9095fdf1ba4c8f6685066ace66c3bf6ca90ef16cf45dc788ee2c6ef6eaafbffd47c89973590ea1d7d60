{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/product/[product].js\";\nimport Image from 'next/image';\nimport Head from 'next/head';\nexport default function ProductPage(data) {\n  const pdata = data.product;\n  console.log(\"products\", pdata);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"prod\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/product`);\n  const products = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = products.map(post => ({\n    params: {\n      product: post.id.toString()\n    }\n  }));\n  console.log(\"path\", paths); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: true\n  };\n}; // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  const id = params.product;\n  console.log(\"prod\", id); // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/product/?slug=${id}`);\n  const product = await res.json(); //console.log(\"pid\",page)\n  // Pass post data to the page via props\n\n  return {\n    props: {\n      product\n    }\n  };\n}","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/product/[product].js"],"names":["Image","Head","ProductPage","data","pdata","product","console","log","getStaticPaths","res","fetch","products","json","paths","map","post","params","id","toString","fallback","getStaticProps","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,WAAT,CAAsBC,IAAtB,EAA4B;AAExC,QAAMC,KAAK,GAAGD,IAAI,CAACE,OAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBH,KAAvB;AAGC,sBACI;AAAA,2BACA,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;AAED,OAAO,MAAMI,cAAc,GAAG,YAAa;AAC3C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,uCAAF,CAAvB;AAGA,QAAMC,QAAQ,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAvB,CAJ2C,CAMzC;;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAcC,IAAD,KAAW;AACpCC,IAAAA,MAAM,EAAE;AAAEX,MAAAA,OAAO,EAAEU,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAX;AAD4B,GAAX,CAAb,CAAd;AAGAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBM,KAAnB,EAVyC,CAWzC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAED,CAfM,C,CAkBP;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEJ,EAAAA;AAAF,CAA9B,EAA0C;AAC7C,QAAMC,EAAE,GAAGD,MAAM,CAACX,OAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBU,EAAnB,EAF6C,CAG7C;AACA;;AACA,QAAMR,GAAG,GAAG,MAAMC,KAAK,CAAE,+CAA8CO,EAAG,EAAnD,CAAvB;AACA,QAAMZ,OAAO,GAAG,MAAMI,GAAG,CAACG,IAAJ,EAAtB,CAN6C,CAO7C;AACA;;AACA,SAAO;AAAES,IAAAA,KAAK,EAAE;AAAEhB,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import Image from 'next/image'\nimport Head from 'next/head'\nexport default function ProductPage( data ){\n\n   const pdata = data.product;\n   console.log(\"products\",pdata) \n  \n\n    return (\n        <div>\n        <Head>\n            <title>prod</title>\n        </Head>\n        \n           \n        </div>\n    )\n\n}\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/product`)\n\n\nconst products = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = products.map((post) => ({\n    params: { product: post.id.toString() },\n  }))\n  console.log(\"path\",paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: true }\n\n}\n\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    const id = params.product;\n    console.log(\"prod\",id)\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://wp.local/wp-json/wp/v2/product/?slug=${id}`)\n    const product = await res.json()\n    //console.log(\"pid\",page)\n    // Pass post data to the page via props\n    return { props: { product } }\n  }"]},"metadata":{},"sourceType":"module"}
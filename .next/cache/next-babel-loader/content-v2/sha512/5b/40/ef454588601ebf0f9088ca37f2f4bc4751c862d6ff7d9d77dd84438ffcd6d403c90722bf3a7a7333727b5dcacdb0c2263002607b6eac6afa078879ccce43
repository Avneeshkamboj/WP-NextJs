{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\";\n//import Image from 'next/image'\nimport Head from 'next/head';\nexport var __N_SSG = true;\nexport default function MyPage(data) {\n  var pdata = data.page; //console.log(\"page\",pdata) \n\n  if (pdata) {\n    var contnt = pdata[0].content.rendered;\n  } else {\n    var contnt = \"No Data\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: pdata ? pdata[0].title.rendered : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pdata ? pdata[0].title.rendered : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: \" \"\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      dangerouslySetInnerHTML: {\n        __html: contnt\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n_c = MyPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyPage\");","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Head","MyPage","data","pdata","page","contnt","content","rendered","title","__html"],"mappings":";;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;;AACA,eAAe,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AAEnC,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAnB,CAFmC,CAGnC;;AACA,MAAGD,KAAH,EAAS;AACZ,QAAIE,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiBC,QAA9B;AACI,GAFD,MAEK;AACJ,QAAIF,MAAM,GAAG,SAAb;AACA;;AAEA,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,6BACI;AAAA,kBAAQF,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAeD,QAAlB,gBAA6B;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAKI;AAAA,gBAAKJ,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAL,CAASK,KAAT,CAAeD,QAAlB,gBAA6B;AAAA;AAAA;AAAvC;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAS,MAAA,uBAAuB,EAAE;AAACE,QAAAA,MAAM,EAAEJ;AAAT;AAAlC;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;KArBuBJ,M","sourcesContent":["//import Image from 'next/image'\nimport Head from 'next/head'\nexport default function MyPage( data ){\n\n   const pdata = data.page;\n   //console.log(\"page\",pdata) \n   if(pdata){\nvar contnt = pdata[0].content.rendered;\n   }else{\n    var contnt = \"No Data\";\n   } \n\n    return (\n        <div>\n        <Head>\n            <title>{pdata ? pdata[0].title.rendered : <></> }</title>\n        </Head>\n        \n            <h1>{pdata ? pdata[0].title.rendered : <> </> }</h1>\n            <article dangerouslySetInnerHTML={{__html: contnt}}></article>\n        </div>\n    )\n\n}\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  //console.log(\"path\",paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: true }\n\n}\n\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    const id = params.page;\n    //console.log(\"paramw\",id)\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/?slug=${id}`)\n    const page = await res.json()\n    //console.log(\"pid\",page)\n    // Pass post data to the page via props\n    return { props: { page } }\n  }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\";\nimport Image from 'next/image';\nimport Head from 'next/head';\nexport default function MyPage(data) {\n  const pdata = data.page;\n  console.log(\"page\", pdata);\n\n  if (pdata) {\n    var contnt = pdata.content.rendered;\n  } else {\n    var contnt = \"No Data\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: pdata ? pdata.title.rendered : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pdata ? pdata.title.rendered : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      dangerouslySetInnerHTML: {\n        __html: contnt\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/pages`);\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      page: post.id.toString()\n    }\n  }));\n  console.log(\"path\", paths); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: true\n  };\n}; // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  const id = params.page;\n  console.log(\"paramw\", id); // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/?slug=${id}`);\n  const page = await res.json(); //console.log(\"pid\",page)\n  // Pass post data to the page via props\n\n  return {\n    props: {\n      page\n    }\n  };\n}","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Image","Head","MyPage","data","pdata","page","console","log","contnt","content","rendered","title","__html","getStaticPaths","res","fetch","posts","json","paths","map","post","params","id","toString","fallback","getStaticProps","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AAEnC,QAAMC,KAAK,GAAGD,IAAI,CAACE,IAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBH,KAAnB;;AACA,MAAGA,KAAH,EAAS;AACZ,QAAII,MAAM,GAAGJ,KAAK,CAACK,OAAN,CAAcC,QAA3B;AACI,GAFD,MAEK;AACJ,QAAIF,MAAM,GAAG,SAAb;AACA;;AAEA,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,6BACI;AAAA,kBAAQJ,KAAK,GAAGA,KAAK,CAACO,KAAN,CAAYD,QAAf,gBAA0B;AAAvC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAKI;AAAA,gBAAKN,KAAK,GAAGA,KAAK,CAACO,KAAN,CAAYD,QAAf,gBAA0B;AAApC;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAS,MAAA,uBAAuB,EAAE;AAACE,QAAAA,MAAM,EAAEJ;AAAT;AAAlC;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;AAED,OAAO,MAAMK,cAAc,GAAG,YAAa;AAC3C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,qCAAF,CAAvB;AAGA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAJ2C,CAMzC;;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,KAAW;AACjCC,IAAAA,MAAM,EAAE;AAAEhB,MAAAA,IAAI,EAAEe,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAR;AADyB,GAAX,CAAV,CAAd;AAGAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBW,KAAnB,EAVyC,CAWzC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAED,CAfM,C,CAkBP;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEJ,EAAAA;AAAF,CAA9B,EAA0C;AAC7C,QAAMC,EAAE,GAAGD,MAAM,CAAChB,IAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBe,EAArB,EAF6C,CAG7C;AACA;;AACA,QAAMR,GAAG,GAAG,MAAMC,KAAK,CAAE,6CAA4CO,EAAG,EAAjD,CAAvB;AACA,QAAMjB,IAAI,GAAG,MAAMS,GAAG,CAACG,IAAJ,EAAnB,CAN6C,CAO7C;AACA;;AACA,SAAO;AAAES,IAAAA,KAAK,EAAE;AAAErB,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import Image from 'next/image'\nimport Head from 'next/head'\nexport default function MyPage( data ){\n\n   const pdata = data.page;\n   console.log(\"page\",pdata) \n   if(pdata){\nvar contnt = pdata.content.rendered;\n   }else{\n    var contnt = \"No Data\";\n   }\n\n    return (\n        <div>\n        <Head>\n            <title>{pdata ? pdata.title.rendered : <></> }</title>\n        </Head>\n        \n            <h1>{pdata ? pdata.title.rendered : <></> }</h1>\n            <article dangerouslySetInnerHTML={{__html: contnt}}></article>\n        </div>\n    )\n\n}\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  console.log(\"path\",paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: true }\n\n}\n\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    const id = params.page;\n    console.log(\"paramw\",id)\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/?slug=${id}`)\n    const page = await res.json()\n    //console.log(\"pid\",page)\n    // Pass post data to the page via props\n    return { props: { page } }\n  }"]},"metadata":{},"sourceType":"module"}
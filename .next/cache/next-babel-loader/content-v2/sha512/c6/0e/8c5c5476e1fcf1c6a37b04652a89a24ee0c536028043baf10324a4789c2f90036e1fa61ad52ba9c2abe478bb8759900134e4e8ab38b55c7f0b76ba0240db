{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\";\nimport Image from 'next/image';\nimport Head from 'next/head';\nexport default function MyPage(data) {\n  const post = data.post; //console.log(\"res\",post.featuredImage);\n\n  const ifImg = post.featuredImage;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), ifImg == null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \" \"\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(Image, {\n      width: \"640\",\n      height: \"426\",\n      src: post.featuredImage.node.sourceUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      dangerouslySetInnerHTML: {\n        __html: post.content\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/pages`);\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      page: post.id.toString()\n    }\n  }));\n  console.log(\"path\", paths); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}; // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  const id = params.page;\n  console.log(\"param\", id); // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/8`);\n  const pageid = await res.json();\n  console.log(\"pid\", pageid); // Pass post data to the page via props\n\n  return {\n    props: {\n      pageid\n    }\n  };\n}","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Image","Head","MyPage","data","post","ifImg","featuredImage","title","node","sourceUrl","__html","content","getStaticPaths","res","fetch","posts","json","paths","map","params","page","id","toString","console","log","fallback","getStaticProps","pageid","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,MAAT,CAAiBC,IAAjB,EAAuB;AAElC,QAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB,CAFkC,CAGlC;;AACA,QAAMC,KAAK,GAAGD,IAAI,CAACE,aAAnB;AAEA,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,6BACI;AAAA,kBAAQF,IAAI,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA,eAKI;AAAA,gBAAKH,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,YALJ,EAOMF,KAAK,IAAI,IAAV,gBAAkB;AAAA;AAAA,qBAAlB,gBACC,QAAC,KAAD;AAAO,MAAA,KAAK,EAAC,KAAb;AAAmB,MAAA,MAAM,EAAC,KAA1B;AAAgC,MAAA,GAAG,EAAED,IAAI,CAACE,aAAL,CAAmBE,IAAnB,CAAwBC;AAA7D;AAAA;AAAA;AAAA;AAAA,YARN,eASI;AAAS,MAAA,uBAAuB,EAAE;AAACC,QAAAA,MAAM,EAAEN,IAAI,CAACO;AAAd;AAAlC;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;AAED,OAAO,MAAMC,cAAc,GAAG,YAAa;AAC3C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,qCAAF,CAAvB;AAGA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAJ2C,CAMzC;;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWd,IAAD,KAAW;AACjCe,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAEhB,IAAI,CAACiB,EAAL,CAAQC,QAAR;AAAR;AADyB,GAAX,CAAV,CAAd;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBP,KAAnB,EAVyC,CAWzC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASQ,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAED,CAfM,C,CAkBP;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEP,EAAAA;AAAF,CAA9B,EAA0C;AAC7C,QAAME,EAAE,GAAGF,MAAM,CAACC,IAAlB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,EAApB,EAF6C,CAG7C;AACA;;AACA,QAAMR,GAAG,GAAG,MAAMC,KAAK,CAAE,uCAAF,CAAvB;AACA,QAAMa,MAAM,GAAG,MAAMd,GAAG,CAACG,IAAJ,EAArB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBG,MAAlB,EAP6C,CAQ7C;;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAED,MAAAA;AAAF;AAAT,GAAP;AACD","sourcesContent":["import Image from 'next/image'\nimport Head from 'next/head'\nexport default function MyPage( data ){\n\n    const post = data.post;\n    //console.log(\"res\",post.featuredImage);\n    const ifImg = post.featuredImage;\n   \n    return (\n        <div>\n        <Head>\n            <title>{post.title}</title>\n        </Head>\n        \n            <h1>{post.title}</h1>\n            \n            {(ifImg == null) ? <> </>\n            : <Image width=\"640\" height=\"426\" src={post.featuredImage.node.sourceUrl} /> }\n            <article dangerouslySetInnerHTML={{__html: post.content}}></article>\n        </div>\n    )\n\n}\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  console.log(\"path\",paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n\n}\n\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    const id = params.page;\n    console.log(\"param\",id)\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`http://wp.local/wp-json/wp/v2/pages/8`)\n    const pageid = await res.json()\n    console.log(\"pid\",pageid)\n    // Pass post data to the page via props\n    return { props: { pageid } }\n  }"]},"metadata":{},"sourceType":"module"}
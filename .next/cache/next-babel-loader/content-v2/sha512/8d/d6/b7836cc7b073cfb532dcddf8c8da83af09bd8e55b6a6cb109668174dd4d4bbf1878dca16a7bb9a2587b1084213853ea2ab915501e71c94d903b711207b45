{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/wp.local/wp-next-headless-main/pages/[page].js\";\n//import Image from 'next/image'\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\n\nconst Page = () => {\n  const router = useRouter();\n  const {\n    page\n  } = router.query;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Page: \", page]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Page;\nexport const getStaticPaths = async () => {\n  const res = await fetch(`http://wp.local/wp-json/wp/v2/pages`);\n  const posts = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = posts.map(post => ({\n    params: {\n      page: post.id.toString()\n    }\n  }));\n  console.log(paths); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n};","map":{"version":3,"sources":["/var/www/wp.local/wp-next-headless-main/pages/[page].js"],"names":["Head","useRouter","Page","router","page","query","getStaticPaths","res","fetch","posts","json","paths","map","post","params","id","toString","console","log","fallback"],"mappings":";;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAKA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAWD,MAAM,CAACE,KAAxB;AAEA,sBAAQ;AAAA,4BACR,QAAC,IAAD;AAAA,gBAAOD;AAAP;AAAA;AAAA;AAAA;AAAA,YADQ,eAER;AAAA,2BAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAFQ;AAAA,kBAAR;AAKD,CATD;;AAWA,eAAeF,IAAf;AAEA,OAAO,MAAMI,cAAc,GAAG,YAAa;AAC3C,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,qCAAF,CAAvB;AAGA,QAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAApB,CAJ2C,CAMzC;;AACA,QAAMC,KAAK,GAAGF,KAAK,CAACG,GAAN,CAAWC,IAAD,KAAW;AACjCC,IAAAA,MAAM,EAAE;AAAEV,MAAAA,IAAI,EAAES,IAAI,CAACE,EAAL,CAAQC,QAAR;AAAR;AADyB,GAAX,CAAV,CAAd;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAVyC,CAWzC;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASQ,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAED,CAfM","sourcesContent":["//import Image from 'next/image'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\n\n\n\n\nconst Page = () => {\n  const router = useRouter()\n  const { page } = router.query;\n\n  return (<>\n  <Head>{page}</Head>\n  <p>Page: {page}</p>\n  </>\n  )\n}\n\nexport default Page\n\nexport const getStaticPaths = async  () => {\nconst res = await fetch(`http://wp.local/wp-json/wp/v2/pages`)\n\n\nconst posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { page: post.id.toString() },\n  }))\n  console.log(paths)\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n\n}\n"]},"metadata":{},"sourceType":"module"}